# Generated by Django 4.2.3 on 2023-07-21 16:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Berries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='Цена')),
                ('is_available', models.BooleanField(default=False, verbose_name='Есть в наличии')),
                ('title', models.CharField(max_length=20, verbose_name='Название ягод')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Cake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_original', models.BooleanField(default=False, verbose_name='Оригинальный')),
                ('title', models.CharField(blank=True, max_length=50, null=True, verbose_name='Название торта')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Изображение')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('text', models.CharField(blank=True, max_length=100, null=True, verbose_name='Надпись на торте')),
                ('berries', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot.berries', verbose_name='Ягоды')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_telegram', models.CharField(max_length=20, verbose_name='Телеграм id')),
                ('name', models.CharField(default='Дорогой Гость', max_length=30, verbose_name='Имя')),
                ('address', models.CharField(blank=True, max_length=80, null=True, verbose_name='Адрес')),
                ('consent_to_pdProc', models.BooleanField(default=False, verbose_name='Согласие на обработку ПД')),
            ],
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст жалобы')),
            ],
        ),
        migrations.CreateModel(
            name='Decor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='Цена')),
                ('is_available', models.BooleanField(default=False, verbose_name='Есть в наличии')),
                ('title', models.CharField(max_length=20, verbose_name='Название декора')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Levels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='Цена')),
                ('is_available', models.BooleanField(default=False, verbose_name='Есть в наличии')),
                ('title', models.IntegerField(choices=[(1, '1 уровень'), (2, '2 уровня'), (3, '3 уровня')], default=1, unique=True, verbose_name='Количество уровней')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True, verbose_name='Код')),
                ('discount', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Скидка')),
            ],
        ),
        migrations.CreateModel(
            name='Shape',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='Цена')),
                ('is_available', models.BooleanField(default=False, verbose_name='Есть в наличии')),
                ('title', models.CharField(max_length=20, verbose_name='Название формы')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Topping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='Цена')),
                ('is_available', models.BooleanField(default=False, verbose_name='Есть в наличии')),
                ('title', models.CharField(max_length=20, verbose_name='Название топпинга')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_dt', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время заказа')),
                ('delivery_dt', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время доставки')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
                ('cake', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bot.cake', verbose_name='Торт')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='bot.client', verbose_name='Клиент')),
                ('complaint', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot.complaint')),
                ('promo_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot.promocode', verbose_name='Промокод')),
            ],
        ),
        migrations.AddField(
            model_name='cake',
            name='levels',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='bot.levels', verbose_name='Уровни'),
        ),
        migrations.AddField(
            model_name='cake',
            name='shape',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='bot.shape', verbose_name='Форма'),
        ),
        migrations.AddField(
            model_name='cake',
            name='topping',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot.topping', verbose_name='Топпинг'),
        ),
    ]
